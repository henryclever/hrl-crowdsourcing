// Generated by CoffeeScript 1.4.0
(function() {
  var BBoxSelector;

  BBoxSelector = (function() {

    function BBoxSelector(image_frame, options) {
      if (options == null) {
        options = {};
      }
      options.input_method || (options.input_method = "text");
      this.image_frame = image_frame;
      this.border_width = options.border_width || 2;
      this.selectorB = $('<div class="bbox_selector"></div>');
      this.image_frame.append(this.selectorB);
      this.selectorB_r1 = $('<div class="bbox_selector"></div>');
      this.image_frame.append(this.selectorB_r1);
      this.selectorB_r2 = $('<div class="bbox_selector"></div>');
      this.image_frame.append(this.selectorB_r2);
      this.selectorB_r3 = $('<div class="bbox_selector"></div>');
      this.image_frame.append(this.selectorB_r3);
      this.selectorB_l1 = $('<div class="bbox_selector"></div>');
      this.image_frame.append(this.selectorB_l1);
      this.selectorB_l2 = $('<div class="bbox_selector"></div>');
      this.image_frame.append(this.selectorB_l2);
      this.selectorB_l3 = $('<div class="bbox_selector"></div>');
      this.image_frame.append(this.selectorB_l3);
      this.selector = $('<div class="bbox_selector"></div>');
      this.image_frame.append(this.selector);
      this.selector_r1 = $('<div class="bbox_selector"></div>');
      this.image_frame.append(this.selector_r1);
      this.selector_r2 = $('<div class="bbox_selector"></div>');
      this.image_frame.append(this.selector_r2);
      this.selector_r3 = $('<div class="bbox_selector"></div>');
      this.image_frame.append(this.selector_r3);
      this.selector_l1 = $('<div class="bbox_selector"></div>');
      this.image_frame.append(this.selector_l1);
      this.selector_l2 = $('<div class="bbox_selector"></div>');
      this.image_frame.append(this.selector_l2);
      this.selector_l3 = $('<div class="bbox_selector"></div>');
      this.image_frame.append(this.selector_l3);
      this.create_label_box(options);
    }

    BBoxSelector.prototype.create_label_box = function(options) {
      var label, _i, _len, _ref;
      options.labels || (options.labels = ["object"]);
      this.label_box = $('<div class="label_box"></div>');
      this.label_box.css({
        "position": "absolute"
      });
      this.image_frame.append(this.label_box);

      if ($.isArray(options.labels)) {
        options.labels = options.labels[0];
      }
      this.label_input = $('<input class="label_input" name="label" type="text">');
      this.label_box.append(this.label_input);
      this.label_input.val(options.labels);

      return this.label_box.hide();
    };

    BBoxSelector.prototype.crop = function(pageX, pageY) {
      var point;
      return point = {
        x: Math.min(Math.max(Math.round(pageX - this.image_frame.offset().left), 0), Math.round(this.image_frame.width() - 1)),
        y: Math.min(Math.max(Math.round(pageY - this.image_frame.offset().top), 0), Math.round(this.image_frame.height() - 1))
      };
    };

    BBoxSelector.prototype.start = function(pageX, pageY) {
      this.pointer = this.crop(pageX, pageY);
      this.offset = this.pointer;
      this.refresh();
      $('body').css('cursor', 'crosshair');
      return document.onselectstart = function() {
        return false;
      };
    };

    BBoxSelector.prototype.update_rectangle = function(pageX, pageY) {
      this.pointer = this.crop(pageX, pageY);
      return this.refresh();
    };

    BBoxSelector.prototype.input_label = function(options) {
      $('body').css('cursor', 'default');
      document.onselectstart = function() {
        return true;
      };
      this.label_box.show();
      return this.label_input.focus();
    };

    BBoxSelector.prototype.finish = function(options) {
      var data;
      this.label_box.hide();
      data = this.rectangle();
      data.label = $.trim(this.label_input.val().toLowerCase());
      if (options.input_method !== 'fixed') {
        this.label_input.val('');
      }
      return data;
    };

    BBoxSelector.prototype.rectangle = function() {
      var rect, x1, x2, y1, y2;
      x1 = this.pointer.x;
      y1 = this.pointer.y;
      return rect = {
        left: x1,
        top: y1,
      };
    };


    BBoxSelector.prototype.refresh = function() {
      var rect;
      rect = this.rectangle();
      this.selectorB.css({
          "position": "absolute",
          "top": (rect.top - 6) + "px",
          "left": (rect.left - 6 + 0) + "px",
          "border": "6px solid #000",
          "border-radius": "18px",
      });
      this.selectorB_r1.css({
          "position": "absolute",
          "top": (rect.top - 6) + "px",
          "left": (rect.left - 6 + 323) + "px",
          "border": "6px solid #000",
          "border-radius": "18px",
      });
      this.selectorB_r2.css({
          "position": "absolute",
          "top": (rect.top - 6) + "px",
          "left": (rect.left - 6 + 647) + "px",
          "border": "6px solid #000",
          "border-radius": "18px",
      });
      this.selectorB_r3.css({
          "position": "absolute",
          "top": (rect.top - 6) + "px",
          "left": (rect.left - 6 + 970) + "px",
          "border": "6px solid #000",
          "border-radius": "18px",
      });
      this.selectorB_l1.css({
          "position": "absolute",
          "top": (rect.top - 6) + "px",
          "left": (rect.left - 6 - 323) + "px",
          "border": "6px solid #000",
          "border-radius": "18px",
      });
      this.selectorB_l2.css({
          "position": "absolute",
          "top": (rect.top - 6) + "px",
          "left": (rect.left - 6 - 647) + "px",
          "border": "6px solid #000",
          "border-radius": "18px",
      });
      this.selectorB_l3.css({
          "position": "absolute",
          "top": (rect.top - 6) + "px",
          "left": (rect.left - 6 - 970) + "px",
          "border": "6px solid #000",
          "border-radius": "18px",
      });
      this.selector.css({
        "border": 4 + "px dotted rgb(127,255,127)",
        "position": "absolute",
        left: (rect.left - 4) + 'px',
        top: (rect.top - 4) + 'px',
      });
      this.selector_r1.css({
        "border": 4 + "px dotted rgb(127,255,127)",
        "position": "absolute",
        left: (rect.left - 4 + 323) + 'px',
        top: (rect.top - 4) + 'px',
      });
      this.selector_r2.css({
        "border": 4 + "px dotted rgb(127,255,127)",
        "position": "absolute",
        left: (rect.left - 4 + 647) + 'px',
        top: (rect.top - 4) + 'px',
      });
      this.selector_r3.css({
        "border": 4 + "px dotted rgb(127,255,127)",
        "position": "absolute",
        left: (rect.left - 4 + 970) + 'px',
        top: (rect.top - 4) + 'px',
      });
      this.selector_l1.css({
        "border": 4 + "px dotted rgb(127,255,127)",
        "position": "absolute",
        left: (rect.left - 4 - 323) + 'px',
        top: (rect.top - 4) + 'px',
      });
      this.selector_l2.css({
        "border": 4 + "px dotted rgb(127,255,127)",
        "position": "absolute",
        left: (rect.left - 4 - 647) + 'px',
        top: (rect.top - 4) + 'px',
      });
      this.selector_l3.css({
        "border": 4 + "px dotted rgb(127,255,127)",
        "position": "absolute",
        left: (rect.left - 4 - 970) + 'px',
        top: (rect.top - 4) + 'px',
      });
    };

    BBoxSelector.prototype.get_input_element = function() {
      return this.label_input;
    };

    return BBoxSelector;

  })();

  this.BBoxAnnotator = (function() {

    function BBoxAnnotator(options) {
      var annotator, image_element;
      annotator = this;
      this.annotator_element = $(options.id || "#bbox_annotator");
      this.border_width = options.border_width || 2;
      this.show_label = options.show_label || (options.input_method !== "fixed");
      if (options.multiple != null) {
        this.multiple = options.multiple;
      } else {
        this.multiple = true;
      }
      this.image_frame = $('<div class="image_frame"></div>');
      this.annotator_element.append(this.image_frame);
      image_element = new Image();
      image_element.src = options.url;
      image_element.onload = function() {
        options.width || (options.width = image_element.width);
        options.height || (options.height = image_element.height);
        annotator.annotator_element.css({
          "width": (options.width + annotator.border_width * 2) + 'px',
          "height": (options.height + annotator.border_width * 2) + 'px',
          "cursor": "crosshair"
        });
        annotator.image_frame.css({
          "background-image": "url('" + image_element.src + "')",
          "width": options.width + "px",
          "height": options.height + "px",
          "position": "relative"
        });
        annotator.selector = new BBoxSelector(annotator.image_frame, options);
        return annotator.initialize_events(annotator.selector, options);
      };
      image_element.onerror = function() {
        return annotator.annotator_element.text("Invalid image URL: " + options.url);
      };
      this.entries = [];
      this.onchange = options.onchange;
    }

    BBoxAnnotator.prototype.initialize_events = function(selector, options) {
      var annotator, status;
      status = 'free';
      this.hit_menuitem = false;
      annotator = this;
      this.annotator_element.mousedown(function(e) {

        if (!annotator.hit_menuitem) {
          switch (status) {
            case 'free':
            case 'input':
              if (status === 'input') {
                selector.get_input_element().blur();
              }
              if (e.which === 1) {
                selector.start(e.pageX, e.pageY);
                status = 'hold';
              }
          }
        }
        annotator.hit_menuitem = false;
        return true;
      });
      $(window).mousemove(function(e) {
        selector.update_rectangle(e.pageX, e.pageY);
        return true;
      });
      $(window).mouseup(function(e) {
        switch (status) {
          case 'hold':
            selector.update_rectangle(e.pageX, e.pageY);
            selector.input_label(options);
            status = 'input';
            selector.get_input_element().blur();
        }
        return true;
      });
      selector.get_input_element().blur(function(e) {
        var data;
        switch (status) {
          case 'input':
            data = selector.finish(options);
            if (data.label) {
              annotator.add_entry(data);
              if (annotator.onchange) {
                annotator.onchange(annotator.entries);
              }
            }
            status = 'free';
        }
        return true;
      });
      selector.get_input_element().keypress(function(e) {
        switch (status) {
          case 'input':
            selector.get_input_element().blur();
        }
        return e.which !== 13;
      });
      selector.get_input_element().mousedown(function(e) {
        return annotator.hit_menuitem = true;
      });
      selector.get_input_element().mousemove(function(e) {
        return annotator.hit_menuitem = true;
      });
      selector.get_input_element().mouseup(function(e) {
        return annotator.hit_menuitem = true;
      });
      return selector.get_input_element().parent().mousedown(function(e) {
        return annotator.hit_menuitem = true;
      });
    };

    BBoxAnnotator.prototype.add_entry = function(entry) {
      var annotator, box_element, close_button, text_box;
      if (!this.multiple) {
        this.annotator_element.find(".annotated_bounding_box").detach();
        this.entries.splice(0);
      }
      this.entries.push(entry);

      var offsets = [-970, -647, -323, 0, 323, 647, 970];
      var j;
      for (j = 0; j < offsets.length; j++) {
        box_element = $('<div class="annotated_bounding_box"></div>');
        box_element.appendTo(this.image_frame).css({
          "position": "absolute",
          "top": (entry.top - 6) + "px",
          "left": (entry.left - 6 + offsets[j]) + "px",
          "border": "6px solid #000",
          "border-radius": "18px",
        });
        box_element = $('<div class="annotated_bounding_box"></div>');
        box_element.appendTo(this.image_frame).css({
          "position": "absolute",
          "top": (entry.top - 4) + "px",
          "left": (entry.left - 4 + offsets[j]) + "px",
          "border": "4px solid #FFF",
          "border-radius": "18px",
        });
      };
    };

    BBoxAnnotator.prototype.clear_all = function(e) {
      this.annotator_element.find(".annotated_bounding_box").detach();
      this.entries.splice(0);
      return this.onchange(this.entries);
    };
    BBoxAnnotator.prototype.back_up = function(e) {
      var i;
      for (i = 0; i < 14; i++) {
      this.annotator_element.find(".annotated_bounding_box").last().detach();
      }
      this.entries.splice(-1,1)
      return this.onchange(this.entries);
    };

    return BBoxAnnotator;

  })();

}).call(this);
